{"ast":null,"code":"var _jsxFileName = \"/Users/zaeemr49/Documents/Projects/DCW/AgriTech/Frontend/src/components/WeatherDisplay/WeatherDisplay.jsx\";\n// // WeatherDisplay.js\n// import React from \"react\";\n\n// const WeatherDisplay = ({ weather }) => {\n//   return (\n//     <div>\n//       <h3>Current Weather</h3>\n//       {weather ? (\n//         <>\n//           <p>Temperature: {weather.main.temp}°C</p>\n//           <p>Description: {weather.weather[0].description}</p>\n//           <p>Humidity: {weather.main.humidity}%</p>\n//           <p>Wind Speed: {weather.wind.speed} km/h</p>\n//           <p>Pressure: {weather.main.pressure} hPa</p>\n//         </>\n//       ) : (\n//         <p>No weather data available.</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default WeatherDisplay;\n// WeatherDisplay.js\n\n// import React from \"react\";\n// import Card from 'react-bootstrap/Card';\n// import styles from './WeatherDisplay.module.css'; // Import your CSS module\n\n// const WeatherDisplay = ({ weather }) => {\n//   const getWeatherEmoji = (description) => {\n//     description = description.toLowerCase();\n//     if (description.includes(\"cloud\")) return \"☁️\";\n//     if (description.includes(\"rain\")) return \"🌧️\";\n//     if (description.includes(\"clear\")) return \"☀️\";\n//     if (description.includes(\"snow\")) return \"❄️\";\n//     if (description.includes(\"thunderstorm\")) return \"⛈️\";\n//     return \"🌍\"; // Generic fallback for other conditions\n//   };\n\n//   return (\n//     <Card border=\"dark\" style={{ width: '18rem' }}>\n//       <Card.Header className={styles.weatherHeader}>Weather Details</Card.Header>\n//       <Card.Body>\n//         {weather ? (\n//           <>\n//             <Card.Text>Temperature: {weather.main.temp}°C</Card.Text>\n//             <Card.Text>Description: {weather.weather[0].description} {getWeatherEmoji(weather.weather[0].description)}</Card.Text>\n//             <Card.Text>Humidity: {weather.main.humidity}%</Card.Text>\n//             <Card.Text>Wind Speed: {weather.wind.speed} km/h</Card.Text>\n//             <Card.Text>Pressure: {weather.main.pressure} hPa</Card.Text>\n//           </>\n//         ) : (\n//           <Card.Text>No weather data available.</Card.Text>\n//         )}\n//       </Card.Body>\n//     </Card>\n//   );\n// };\n\n// export default WeatherDisplay;\n// WeatherDisplay.js\nimport React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport styles from \"./WeatherDisplay.module.css\"; // Ensure the CSS module is correctly linked\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst WeatherDisplay = ({\n  weather\n}) => {\n  // Helper function to determine weather emoji based on description\n  const getWeatherEmoji = description => {\n    description = description.toLowerCase();\n    if (description.includes(\"cloud\")) return \"☁️\";\n    if (description.includes(\"rain\")) return \"🌧️\";\n    if (description.includes(\"clear\")) return \"☀️\";\n    if (description.includes(\"snow\")) return \"❄️\";\n    if (description.includes(\"thunderstorm\")) return \"⛈️\";\n    return \"🌍\"; // Fallback for other conditions\n  };\n\n  // Additional emojis based on the weather conditions\n  const getHumidityEmoji = humidity => {\n    if (humidity > 80) return \"💦\";\n    if (humidity < 30) return \"🌵\";\n    return \"🌫️\"; // Moderate humidity\n  };\n  const getWindEmoji = speed => {\n    if (speed > 25) return \"🌬️\"; // High wind\n    if (speed > 10) return \"🍃\"; // Moderate wind\n    return \"🌀\"; // Low wind\n  };\n  const getPressureEmoji = pressure => {\n    if (pressure > 1020) return \"🔼\"; // High pressure\n    if (pressure < 1000) return \"🔽\"; // Low pressure\n    return \"⏹️\"; // Normal pressure\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    border: \"secondary\",\n    style: {\n      width: \"18rem\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n      className: styles.weatherHeader,\n      children: \"Weather Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: weather ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Text, {\n          children: [\"Temperature: \", weather.main.temp, \"\\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n          children: [\"Description: \", weather.weather[0].description, \" \", getWeatherEmoji(weather.weather[0].description)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n          children: [\"Humidity: \", weather.main.humidity, \"%\", \" \", getHumidityEmoji(weather.main.humidity)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n          children: [\"Wind Speed: \", weather.wind.speed, \" km/h\", \" \", getWindEmoji(weather.wind.speed)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n          children: [\"Pressure: \", weather.main.pressure, \" hPa\", \" \", getPressureEmoji(weather.main.pressure)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(Card.Text, {\n        children: \"No weather data available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_c = WeatherDisplay;\nexport default WeatherDisplay;\nvar _c;\n$RefreshReg$(_c, \"WeatherDisplay\");","map":{"version":3,"names":["React","Card","styles","jsxDEV","_jsxDEV","Fragment","_Fragment","WeatherDisplay","weather","getWeatherEmoji","description","toLowerCase","includes","getHumidityEmoji","humidity","getWindEmoji","speed","getPressureEmoji","pressure","border","style","width","children","Header","className","weatherHeader","fileName","_jsxFileName","lineNumber","columnNumber","Body","Text","main","temp","wind","_c","$RefreshReg$"],"sources":["/Users/zaeemr49/Documents/Projects/DCW/AgriTech/Frontend/src/components/WeatherDisplay/WeatherDisplay.jsx"],"sourcesContent":["// // WeatherDisplay.js\n// import React from \"react\";\n\n// const WeatherDisplay = ({ weather }) => {\n//   return (\n//     <div>\n//       <h3>Current Weather</h3>\n//       {weather ? (\n//         <>\n//           <p>Temperature: {weather.main.temp}°C</p>\n//           <p>Description: {weather.weather[0].description}</p>\n//           <p>Humidity: {weather.main.humidity}%</p>\n//           <p>Wind Speed: {weather.wind.speed} km/h</p>\n//           <p>Pressure: {weather.main.pressure} hPa</p>\n//         </>\n//       ) : (\n//         <p>No weather data available.</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default WeatherDisplay;\n// WeatherDisplay.js\n\n// import React from \"react\";\n// import Card from 'react-bootstrap/Card';\n// import styles from './WeatherDisplay.module.css'; // Import your CSS module\n\n// const WeatherDisplay = ({ weather }) => {\n//   const getWeatherEmoji = (description) => {\n//     description = description.toLowerCase();\n//     if (description.includes(\"cloud\")) return \"☁️\";\n//     if (description.includes(\"rain\")) return \"🌧️\";\n//     if (description.includes(\"clear\")) return \"☀️\";\n//     if (description.includes(\"snow\")) return \"❄️\";\n//     if (description.includes(\"thunderstorm\")) return \"⛈️\";\n//     return \"🌍\"; // Generic fallback for other conditions\n//   };\n\n//   return (\n//     <Card border=\"dark\" style={{ width: '18rem' }}>\n//       <Card.Header className={styles.weatherHeader}>Weather Details</Card.Header>\n//       <Card.Body>\n//         {weather ? (\n//           <>\n//             <Card.Text>Temperature: {weather.main.temp}°C</Card.Text>\n//             <Card.Text>Description: {weather.weather[0].description} {getWeatherEmoji(weather.weather[0].description)}</Card.Text>\n//             <Card.Text>Humidity: {weather.main.humidity}%</Card.Text>\n//             <Card.Text>Wind Speed: {weather.wind.speed} km/h</Card.Text>\n//             <Card.Text>Pressure: {weather.main.pressure} hPa</Card.Text>\n//           </>\n//         ) : (\n//           <Card.Text>No weather data available.</Card.Text>\n//         )}\n//       </Card.Body>\n//     </Card>\n//   );\n// };\n\n// export default WeatherDisplay;\n// WeatherDisplay.js\nimport React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport styles from \"./WeatherDisplay.module.css\"; // Ensure the CSS module is correctly linked\n\nconst WeatherDisplay = ({ weather }) => {\n  // Helper function to determine weather emoji based on description\n  const getWeatherEmoji = (description) => {\n    description = description.toLowerCase();\n    if (description.includes(\"cloud\")) return \"☁️\";\n    if (description.includes(\"rain\")) return \"🌧️\";\n    if (description.includes(\"clear\")) return \"☀️\";\n    if (description.includes(\"snow\")) return \"❄️\";\n    if (description.includes(\"thunderstorm\")) return \"⛈️\";\n    return \"🌍\"; // Fallback for other conditions\n  };\n\n  // Additional emojis based on the weather conditions\n  const getHumidityEmoji = (humidity) => {\n    if (humidity > 80) return \"💦\";\n    if (humidity < 30) return \"🌵\";\n    return \"🌫️\"; // Moderate humidity\n  };\n\n  const getWindEmoji = (speed) => {\n    if (speed > 25) return \"🌬️\"; // High wind\n    if (speed > 10) return \"🍃\"; // Moderate wind\n    return \"🌀\"; // Low wind\n  };\n\n  const getPressureEmoji = (pressure) => {\n    if (pressure > 1020) return \"🔼\"; // High pressure\n    if (pressure < 1000) return \"🔽\"; // Low pressure\n    return \"⏹️\"; // Normal pressure\n  };\n\n  return (\n    <Card border=\"secondary\" style={{ width: \"18rem\" }}>\n      <Card.Header className={styles.weatherHeader}>\n        Weather Details\n      </Card.Header>\n      <Card.Body>\n        {weather ? (\n          <>\n            <Card.Text>Temperature: {weather.main.temp}°C</Card.Text>\n            <Card.Text>\n              Description: {weather.weather[0].description}{\" \"}\n              {getWeatherEmoji(weather.weather[0].description)}\n            </Card.Text>\n            <Card.Text>\n              Humidity: {weather.main.humidity}%{\" \"}\n              {getHumidityEmoji(weather.main.humidity)}\n            </Card.Text>\n            <Card.Text>\n              Wind Speed: {weather.wind.speed} km/h{\" \"}\n              {getWindEmoji(weather.wind.speed)}\n            </Card.Text>\n            <Card.Text>\n              Pressure: {weather.main.pressure} hPa{\" \"}\n              {getPressureEmoji(weather.main.pressure)}\n            </Card.Text>\n          </>\n        ) : (\n          <Card.Text>No weather data available.</Card.Text>\n        )}\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default WeatherDisplay;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}