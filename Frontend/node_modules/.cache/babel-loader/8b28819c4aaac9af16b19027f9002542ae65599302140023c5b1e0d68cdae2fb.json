{"ast":null,"code":"var _jsxFileName = \"/Users/zaeemr49/Documents/Projects/DCW/AgriTech/Frontend/src/components/Portal/Portal.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n\n// function Portal() {\n//   const [weatherInfo, setWeatherInfo] = useState(null);\n//   const userId = localStorage.getItem(\"userId\"); // Example: Fetching from localStorage\n\n//   useEffect(() => {\n//     const fetchWeatherInfo = async () => {\n//       try {\n//         const response = await axios.post(\n//           \"http://localhost:5010/api/weather/weather-info\",\n//           { userId }\n//         );\n//         setWeatherInfo(response.data);\n//       } catch (error) {\n//         console.error(\"Failed to fetch weather data:\", error);\n//       }\n//     };\n\n//     fetchWeatherInfo();\n//   }, [userId]);\n\n//   return (\n//     <div>\n//       {weatherInfo ? (\n//         <>\n//           <div>\n//             <h3>Current Weather</h3>\n//             {weatherInfo.currentWeather && (\n//               <>\n//                 <p>Temperature: {weatherInfo.currentWeather.main.temp}Â°C</p>\n//                 <p>\n//                   Description:{\" \"}\n//                   {weatherInfo.currentWeather.weather[0].description}\n//                 </p>\n//                 <p>Humidity: {weatherInfo.currentWeather.main.humidity}%</p>\n//                 <p>Wind Speed: {weatherInfo.currentWeather.wind.speed} km/h</p>\n//                 <p>Pressure: {weatherInfo.currentWeather.main.pressure} hPa</p>\n//               </>\n//             )}\n//           </div>\n//         </>\n//       ) : (\n//         <p>Loading weather information...</p>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default Portal;\n\n// Portal.js\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import WeatherDisplay from \"../WeatherDisplay/WeatherDisplay\";\n// import CropLifeCycleDisplay from \"../CropLifeCycleDisplay/CropLifeCycleDisplay\";\n// import cropData from \"./cropData.json\"; // Import the JSON data\n\n// function Portal() {\n//   const [weatherInfo, setWeatherInfo] = useState(null);\n//   const [cropInfo, setCropInfo] = useState(null);\n\n//   const userId = localStorage.getItem(\"userId\");\n//   useEffect(() => {\n//     const fetchWeatherInfo = async () => {\n//       try {\n//         const response = await axios.post(\n//           \"http://localhost:5010/api/weather/weather-info\",\n//           { userId }\n//         );\n//         setWeatherInfo(response.data);\n\n//         // Use the end point\n//         // const cropResponse = await axios.get(\"http://localhost:5010/api/crop/crop-info\", { params: { userId } });\n//         // setCropInfo(cropResponse.data);\n//         setCropInfo(cropData);\n\n//       } catch (error) {\n//         console.error(\"Failed to fetch weather data:\", error);\n//       }\n//     };\n\n//     fetchWeatherInfo();\n//   }, [userId]);\n\n//   return (\n//     <div className=\"m-5\">\n//       {weatherInfo ? (\n//         <WeatherDisplay weather={weatherInfo.currentWeather} />\n//       ) : (\n//         <p>Loading weather information...</p>\n//       )}\n//       {cropInfo ? (\n//         <CropLifeCycleDisplay cropData={cropInfo} />\n//       ) : (\n//         <p>Loading crop life cycle information...</p>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default Portal;\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport WeatherDisplay from \"../WeatherDisplay/WeatherDisplay\";\nimport CropLifeCycleDisplay from \"../CropLifeCycleDisplay/CropLifeCycleDisplay\";\nimport IrrigationRequirementsDisplay from \"../IrrigationRequirementsDisplay/IrrigationRequirementsDisplay\";\nimport cropData from \"./cropLifeCycleData.json\"; // Import the JSON data\nimport cropIrrigationData from \"./cropIrrigationData.json\"; // Assuming the data is stored in a file\nimport Navbar from \"../Navbar/Navbar.jsx\";\nimport { Row, Col } from \"react-bootstrap\"; // Make sure to import Row and Col from react-bootstrap\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Portal() {\n  _s();\n  const [weatherInfo, setWeatherInfo] = useState(null);\n  const [cropInfo, setCropInfo] = useState(null);\n  const userId = localStorage.getItem(\"userId\");\n  useEffect(() => {\n    const fetchWeatherInfo = async () => {\n      try {\n        const response = await axios.post(\"http://localhost:5010/api/weather/weather-info\", {\n          userId\n        });\n        setWeatherInfo(response.data);\n        setCropInfo(cropData); // Using static data for now\n      } catch (error) {\n        console.error(\"Failed to fetch weather data:\", error);\n      }\n    };\n    fetchWeatherInfo();\n  }, [userId]);\n  const navigate = useNavigate(); // Use useNavigate instead of useHistory\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"userToken\"); // Clear user token/session\n    navigate('/'); // Use navigate instead of history.push\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      onLogout: handleLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"m-5\",\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          md: 6,\n          className: \"d-flex align-items-start justify-content-center\",\n          children: weatherInfo ? /*#__PURE__*/_jsxDEV(WeatherDisplay, {\n            weather: weatherInfo.currentWeather\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading weather information...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          md: 6,\n          children: [\" \", cropInfo ? /*#__PURE__*/_jsxDEV(CropLifeCycleDisplay, {\n            cropData: cropInfo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading crop life cycle information...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"mt-5\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          md: 2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          md: 8,\n          children: /*#__PURE__*/_jsxDEV(IrrigationRequirementsDisplay, {\n            data: cropIrrigationData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          md: 2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_s(Portal, \"/g+sfWDVdassAODcVe999fdhJPI=\", false, function () {\n  return [useNavigate];\n});\n_c = Portal;\nexport default Portal;\nvar _c;\n$RefreshReg$(_c, \"Portal\");","map":{"version":3,"names":["React","useState","useEffect","axios","WeatherDisplay","CropLifeCycleDisplay","IrrigationRequirementsDisplay","cropData","cropIrrigationData","Navbar","Row","Col","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","Portal","_s","weatherInfo","setWeatherInfo","cropInfo","setCropInfo","userId","localStorage","getItem","fetchWeatherInfo","response","post","data","error","console","navigate","handleLogout","removeItem","children","onLogout","fileName","_jsxFileName","lineNumber","columnNumber","className","md","weather","currentWeather","_c","$RefreshReg$"],"sources":["/Users/zaeemr49/Documents/Projects/DCW/AgriTech/Frontend/src/components/Portal/Portal.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n\n// function Portal() {\n//   const [weatherInfo, setWeatherInfo] = useState(null);\n//   const userId = localStorage.getItem(\"userId\"); // Example: Fetching from localStorage\n\n//   useEffect(() => {\n//     const fetchWeatherInfo = async () => {\n//       try {\n//         const response = await axios.post(\n//           \"http://localhost:5010/api/weather/weather-info\",\n//           { userId }\n//         );\n//         setWeatherInfo(response.data);\n//       } catch (error) {\n//         console.error(\"Failed to fetch weather data:\", error);\n//       }\n//     };\n\n//     fetchWeatherInfo();\n//   }, [userId]);\n\n//   return (\n//     <div>\n//       {weatherInfo ? (\n//         <>\n//           <div>\n//             <h3>Current Weather</h3>\n//             {weatherInfo.currentWeather && (\n//               <>\n//                 <p>Temperature: {weatherInfo.currentWeather.main.temp}Â°C</p>\n//                 <p>\n//                   Description:{\" \"}\n//                   {weatherInfo.currentWeather.weather[0].description}\n//                 </p>\n//                 <p>Humidity: {weatherInfo.currentWeather.main.humidity}%</p>\n//                 <p>Wind Speed: {weatherInfo.currentWeather.wind.speed} km/h</p>\n//                 <p>Pressure: {weatherInfo.currentWeather.main.pressure} hPa</p>\n//               </>\n//             )}\n//           </div>\n//         </>\n//       ) : (\n//         <p>Loading weather information...</p>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default Portal;\n\n// Portal.js\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import WeatherDisplay from \"../WeatherDisplay/WeatherDisplay\";\n// import CropLifeCycleDisplay from \"../CropLifeCycleDisplay/CropLifeCycleDisplay\";\n// import cropData from \"./cropData.json\"; // Import the JSON data\n\n// function Portal() {\n//   const [weatherInfo, setWeatherInfo] = useState(null);\n//   const [cropInfo, setCropInfo] = useState(null);\n\n//   const userId = localStorage.getItem(\"userId\");\n//   useEffect(() => {\n//     const fetchWeatherInfo = async () => {\n//       try {\n//         const response = await axios.post(\n//           \"http://localhost:5010/api/weather/weather-info\",\n//           { userId }\n//         );\n//         setWeatherInfo(response.data);\n\n//         // Use the end point\n//         // const cropResponse = await axios.get(\"http://localhost:5010/api/crop/crop-info\", { params: { userId } });\n//         // setCropInfo(cropResponse.data);\n//         setCropInfo(cropData);\n\n//       } catch (error) {\n//         console.error(\"Failed to fetch weather data:\", error);\n//       }\n//     };\n\n//     fetchWeatherInfo();\n//   }, [userId]);\n\n//   return (\n//     <div className=\"m-5\">\n//       {weatherInfo ? (\n//         <WeatherDisplay weather={weatherInfo.currentWeather} />\n//       ) : (\n//         <p>Loading weather information...</p>\n//       )}\n//       {cropInfo ? (\n//         <CropLifeCycleDisplay cropData={cropInfo} />\n//       ) : (\n//         <p>Loading crop life cycle information...</p>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default Portal;\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport WeatherDisplay from \"../WeatherDisplay/WeatherDisplay\";\nimport CropLifeCycleDisplay from \"../CropLifeCycleDisplay/CropLifeCycleDisplay\";\nimport IrrigationRequirementsDisplay from \"../IrrigationRequirementsDisplay/IrrigationRequirementsDisplay\";\nimport cropData from \"./cropLifeCycleData.json\"; // Import the JSON data\nimport cropIrrigationData from \"./cropIrrigationData.json\"; // Assuming the data is stored in a file\nimport Navbar from \"../Navbar/Navbar.jsx\"\nimport { Row, Col } from \"react-bootstrap\"; // Make sure to import Row and Col from react-bootstrap\nimport { useNavigate } from 'react-router-dom';\n\n\nfunction Portal() {\n  const [weatherInfo, setWeatherInfo] = useState(null);\n  const [cropInfo, setCropInfo] = useState(null);\n\n  const userId = localStorage.getItem(\"userId\");\n  useEffect(() => {\n    const fetchWeatherInfo = async () => {\n      try {\n        const response = await axios.post(\n          \"http://localhost:5010/api/weather/weather-info\",\n          { userId }\n        );\n        setWeatherInfo(response.data);\n        setCropInfo(cropData); // Using static data for now\n      } catch (error) {\n        console.error(\"Failed to fetch weather data:\", error);\n      }\n    };\n\n    fetchWeatherInfo();\n  }, [userId]);\n\n\n  const navigate = useNavigate(); // Use useNavigate instead of useHistory\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"userToken\"); // Clear user token/session\n    navigate('/'); // Use navigate instead of history.push\n  };\n\n  return (\n    <>\n      <Navbar onLogout={handleLogout} />\n    <div className=\"m-5\">\n\n      \n      <Row>\n        <Col md={6} className=\"d-flex align-items-start justify-content-center\">\n          {weatherInfo ? (\n            <WeatherDisplay weather={weatherInfo.currentWeather} />\n          ) : (\n            <p>Loading weather information...</p>\n          )}\n        </Col>\n        <Col md={6}>\n          {\" \"}\n          {/* Adjust the size as needed */}\n          {cropInfo ? (\n            <CropLifeCycleDisplay cropData={cropInfo} />\n          ) : (\n            <p>Loading crop life cycle information...</p>\n          )}\n        </Col>\n      </Row>\n      <Row className=\"mt-5\">\n        <Col md={2}></Col>\n        <Col md={8}>\n          <IrrigationRequirementsDisplay data={cropIrrigationData} />\n        </Col>\n        <Col md={2}></Col>\n      </Row>\n    </div>\n    </>\n  );\n}\n\nexport default Portal;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}